# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  EM_CACHE_FOLDER: "emsdk-cache"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run:
          echo "::set-output name=dir::$(corepack yarn config get cacheFolder)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: sudo apt update
      - name: Install utilities
        run: sudo apt install -y automake build-essential git pkg-config unzip
      - name: Read emsdk version from Makefile
        id: makefile-decipher
        run:
          awk '$1 ~ /_VERSION$/ { print "##[set-output name=" $1 ";]" $3 }'
          Makefile
      - name: Cache emsdk and build dependencies
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: |
            ${{env.EM_CACHE_FOLDER}}
            build-deps/**
            prefix-full/**
          key:
            ${{ steps.makefile-decipher.outputs.EMSCRIPTEN_VERSION }}-${{
            runner.os }}-${{ steps.makefile-decipher.outputs.EXPAT_VERSION
            }}-${{ steps.makefile-decipher.outputs.GRAPHVIZ_VERSION }}
      - name: Setup emsdk (use cache if found, create otherwise)
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{ steps.makefile-decipher.outputs.EMSCRIPTEN_VERSION }}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Download and build dependencies
        if: steps.cache-system-libraries.outputs.cache-hit != 'true'
        run: make deps -j
        env:
          RUNNER_TEMP: /tmp
          CI: true
      - name: Build and pack Viz.js
        run: emmake make pack -j
        env:
          VIZ_VERSION: unreleased+${{ github.sha }}
      - name: Run tests
        run: emmake make test -j
        env:
          DENO:
          VIZ_VERSION: unreleased+${{ github.sha }}
      - name: Upload artifact if tests are green
        if: success()
        uses: actions/upload-artifact@v1
        with:
          name: viz.js-vunreleased+${{ github.sha }}.tar.gz
          path: sources/viz.js-vunreleased+${{ github.sha }}.tar.gz

  test-node:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [12.x, 14.x, 16.x, 18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run:
          echo "::set-output name=dir::$(corepack yarn config get cacheFolder)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download tarball from build job
        uses: actions/download-artifact@v3
        with:
          name: viz.js-vunreleased+${{ github.sha }}.tar.gz
      - name: Install Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Run tests
        run: make test-node -j
        env:
          USE_TARBALL: viz.js-vunreleased+${{ github.sha }}.tar.gz

  test-node-legacy:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [v10.x]

    steps:
      - uses: actions/checkout@v3
      - name: Download tarball from build job
        uses: actions/download-artifact@v3
        with:
          name: viz.js-vunreleased+${{ github.sha }}.tar.gz
      - name: Install Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        env:
          RUNNER_TEMP: /tmp
        with:
          node-version: ${{ matrix.node }}
      - name: Prepare tests
        run:
          rm package.json && npm i mocha@9 && npm i viz.js-vunreleased+${{
          github.sha }}.tar.gz && echo 'const assert=require("assert");' >
          test/node.cjs && awk '/^describe\(/{o=1} { if (o==1) { print } }'
          test/node.js >> test/node.cjs
      - name: Run CJS tests
        run:
          node ./node_modules/.bin/mocha test/node.cjs -f "should render a graph
          using sync version"

  test-deno:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        deno: [v1.21.2]

    steps:
      - uses: actions/checkout@v3
      - name: Download tarball from build job
        uses: actions/download-artifact@v3
        with:
          name: viz.js-vunreleased+${{ github.sha }}.tar.gz
      - name: Install Deno ${{ matrix.deno }}
        run:
          curl -fsSL https://deno.land/x/install/install.sh | sudo
          DENO_INSTALL=/usr/local sh -s ${{ matrix.deno }}
      - name: Run tests
        run: make test-deno -j
        env:
          USE_TARBALL: viz.js-vunreleased+${{ github.sha }}.tar.gz
